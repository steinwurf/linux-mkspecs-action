name: Linux C++ make-specs
on:
  workflow_call:
    inputs:
      extra_resolve_options:
        description: "Extra Resolve Options"
        type: string
        required: false
      test_command:
        description: "Test Command"
        type: string
        required: false
        default: python3 waf --run_tests
jobs:
  docker_builds:
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        config:
          - cxx_mkspec: --cxx_mkspec=cxx_gxx122_x64
            name: GCC 12
          - container: ghcr.io/steinwurf/gcc-6.3.0:1.0.0
            cxx_mkspec: --cxx_mkspec=cxx_gxx63_x64
            name: GCC 6.3
          - container: ghcr.io/steinwurf/clang-3.9:1.0.0
            name: Clang 3.9
            cxx_mkspec: --cxx_mkspec=cxx_clang39_x64
          - container: ghcr.io/steinwurf/clang-15:1.0.0
            name: Clang 15
            cxx_mkspec: --cxx_mkspec=cxx_clang150_x64
          - container: ghcr.io/steinwurf/clang-15:1.0.0
            cxx_mkspec: --cxx_mkspec=cxx_clang15_address_sanitizer_x64
            name: Clang 15 Address Sanitizer
          - container: ghcr.io/steinwurf/clang-15:1.0.0
            cxx_mkspec: --cxx_mkspec=cxx_clang15_thread_sanitizer_x64
            name: Clang 15 Thread Sanitizer
    runs-on: [self-hosted, docker, builder]
    name: ${{ matrix.config.name }}
    container:
      image: ${{ matrix.config.container }}
      options: --user 0:0
      volumes:
        - /home/buildbot/.ssh:/root/.ssh
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Waf Configure
        env:
          EXTRA_RESOLVE_OPTIONS: ${{ inputs.extra_resolve_options }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 15
          command: python3 waf configure --git_protocol=git@ ${{ matrix.config.cxx_mkspec }} ${{ env.EXTRA_RESOLVE_OPTIONS }}
      - name: Waf Build
        run: |
          echo "::add-matcher::.github/gcc-problem-matcher.json"
          python3 waf
      - name: Waf Test
        env:
          TEST_COMMAND: ${{ inputs.test_command }}
        run: ${{ env.TEST_COMMAND }}
